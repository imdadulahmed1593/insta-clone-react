{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","forwardRef","ref","user","username","postId","imageUrl","caption","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","preventDefault","add","displayName","ImageUpload","image","setImage","setUrl","progress","setProgress","setCaption","max","Input","files","Button","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","child","getDownloadURL","then","url","timestamp","FieldValue","serverTimestamp","getModalStyle","height","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","setUsername","email","setEmail","password","setPassword","setUser","open","setOpen","registerOpen","setRegisterOpen","onAuthStateChanged","authUser","updateProfile","orderBy","id","post","Modal","onClose","style","signInWithEmailAndPassword","catch","alert","message","createUserWithEmailAndPassword","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0a49910.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDKEhq43H0pEV_zcBFjqwEFMSpVxJD_zIc\",\n  authDomain: \"instagram-clone-react-c10d0.firebaseapp.com\",\n  databaseURL: \"https://instagram-clone-react-c10d0.firebaseio.com\",\n  projectId: \"instagram-clone-react-c10d0\",\n  storageBucket: \"instagram-clone-react-c10d0.appspot.com\",\n  messagingSenderId: \"784493726566\",\n  appId: \"1:784493726566:web:b43e789602fcb80f2ad6a7\",\n  measurementId: \"G-QELV2MYCSZ\",\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst storage = firebase.storage();\n\nexport { db, auth, storage };\n","import React, { useState, useEffect, forwardRef } from \"react\";\nimport \"./Post.css\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { db } from \"./firebase\";\nimport firebase from \"firebase\";\n\nconst Post = forwardRef(\n  ({ user, username, postId, imageUrl, caption }, ref) => {\n    const [comments, setComments] = useState([]);\n    const [comment, setComment] = useState(\"\");\n\n    useEffect(() => {\n      let unsubscribe;\n      if (postId) {\n        unsubscribe = db\n          .collection(\"posts\")\n          .doc(postId)\n          .collection(\"comments\")\n          .onSnapshot((snapshot) => {\n            setComments(snapshot.docs.map((doc) => doc.data()));\n          });\n      }\n\n      return () => {\n        unsubscribe();\n      };\n    }, [postId]);\n\n    const postComment = (e) => {\n      e.preventDefault();\n\n      db.collection(\"posts\").doc(postId).collection(\"comments\").add({\n        text: comment,\n        username: user.displayName,\n      });\n      setComment(\"\");\n    };\n\n    return (\n      <div className=\"post\" ref={ref}>\n        <div className=\"post__header\">\n          <Avatar\n            className=\"post__avatar\"\n            alt={username}\n            src=\"/static/images/avatar/1.jpg\"\n          />\n          <h3>{username}</h3>\n        </div>\n\n        <img className=\"post__image\" src={imageUrl} alt=\"post\" />\n        <h4 className=\"post__text\">\n          {username} <span className=\"post__caption\">{caption}</span>\n        </h4>\n\n        <div className=\"post__comments\">\n          {comments.map((comment) => (\n            <p>\n              <b>{comment.username}</b> {comment.text}\n            </p>\n          ))}\n        </div>\n\n        {user && (\n          <form className=\"post__commentBox\">\n            <input\n              className=\"post__input\"\n              type=\"text\"\n              placeholder=\"Add a comment...\"\n              value={comment}\n              onChange={(e) => setComment(e.target.value)}\n            />\n            <button\n              disabled={!comment}\n              className=\"post__button\"\n              type=\"submit\"\n              onClick={postComment}\n            >\n              Post\n            </button>\n          </form>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default Post;\n","import React, { useState } from \"react\";\nimport firebase from \"firebase\";\nimport { storage, db } from \"./firebase\";\nimport \"./ImageUpload.css\";\nimport { Input, Button } from \"@material-ui/core\";\n\nconst ImageUpload = ({ username }) => {\n  const [image, setImage] = useState(null);\n  const [url, setUrl] = useState(\"\");\n  const [progress, setProgress] = useState(0);\n  const [caption, setCaption] = useState(\"\");\n\n  const handleChange = (e) => {\n    if (e.target.files[0]) {\n      setImage(e.target.files[0]);\n    }\n  };\n\n  const handleUpload = () => {\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\n    uploadTask.on(\n      \"state_changed\",\n      (snapshot) => {\n        // progress function ...\n        const progress = Math.round(\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\n        );\n        setProgress(progress);\n      },\n      (error) => {\n        // Error function ...\n        console.log(error);\n      },\n      () => {\n        // complete function ...\n        storage\n          .ref(\"images\")\n          .child(image.name)\n          .getDownloadURL()\n          .then((url) => {\n            setUrl(url);\n\n            // post image inside db\n            db.collection(\"posts\").add({\n              imageUrl: url,\n              caption: caption,\n              username: username,\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n            });\n\n            setProgress(0);\n            setCaption(\"\");\n            setImage(null);\n          });\n      }\n    );\n  };\n\n  return (\n    <div className=\"imageupload\">\n      <progress className=\"imageupload__progress\" value={progress} max=\"100\" />\n      <Input\n        placeholder=\"Enter a caption\"\n        value={caption}\n        onChange={(e) => setCaption(e.target.value)}\n      />\n      <div>\n        <input type=\"file\" onChange={handleChange} />\n        <Button className=\"imageupload__button\" onClick={handleUpload}>\n          Upload\n        </Button>\n      </div>\n\n      <br />\n    </div>\n  );\n};\n\nexport default ImageUpload;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./Post\";\nimport ImageUpload from \"./ImageUpload\";\nimport { db, auth } from \"./firebase\";\nimport { Button, Avatar, makeStyles, Modal, Input } from \"@material-ui/core\";\nimport FlipMove from \"react-flip-move\";\nimport InstagramEmbed from \"react-instagram-embed\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    height: \"300px\",\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    height: 200,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [registerOpen, setRegisterOpen] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // user is logged in...\n        console.log(authUser);\n        setUser(authUser);\n\n        if (authUser.displayName) {\n          // dont update username\n        } else {\n          return authUser.updateProfile({\n            displayName: username,\n          });\n        }\n      } else {\n        setUser(null);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  useEffect(() => {\n    db.collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) =>\n        setPosts(snapshot.docs.map((doc) => ({ id: doc.id, post: doc.data() })))\n      );\n  }, []);\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n\n    setOpen(false);\n  };\n\n  const handleRegister = (e) => {\n    e.preventDefault();\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .catch((error) => console.log(error.message));\n\n    setRegisterOpen(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <Modal open={open} onClose={() => setOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__login\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                alt=\"\"\n              />\n            </center>\n\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button onClick={handleLogin}>Login</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal open={registerOpen} onClose={() => setRegisterOpen(false)}>\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__login\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n                alt=\"\"\n              />\n            </center>\n            <Input\n              type=\"text\"\n              placeholder=\"username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button onClick={handleRegister}>Register</Button>\n          </form>\n        </div>\n      </Modal>\n      <div className=\"app__header\">\n        <img\n          className=\"app__headerImage\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"\"\n        />\n        {user?.displayName ? (\n          <div className=\"app__headerRight\">\n            <Button onClick={() => auth.signOut()}>Logout</Button>\n            <Avatar\n              className=\"app__headerAvatar\"\n              alt={user.displayName}\n              src=\"/static/images/avatar/1.jpg\"\n            />\n          </div>\n        ) : (\n          <form className=\"app__loginHome\">\n            <Button onClick={() => setOpen(true)}>Login</Button>\n            <Button onClick={() => setRegisterOpen(true)}>Sign Up</Button>\n          </form>\n        )}\n      </div>\n\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n          <FlipMove>\n            {posts.map(({ id, post }) => (\n              <Post\n                user={user}\n                key={id}\n                postId={id}\n                username={post.username}\n                caption={post.caption}\n                imageUrl={post.imageUrl}\n              />\n            ))}\n          </FlipMove>\n        </div>\n        <div className=\"app__postsRight\">\n          <InstagramEmbed\n            url=\"https://www.instagram.com/p/CFU7Ek8p3Yi/\"\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName=\"div\"\n            protocol=\"\"\n            injectScript\n            onLoading={() => {}}\n            onSuccess={() => {}}\n            onAfterRender={() => {}}\n            onFailure={() => {}}\n          />\n        </div>\n      </div>\n\n      {user?.displayName ? (\n        <div className=\"app__upload\">\n          <ImageUpload username={user.displayName} />\n        </div>\n      ) : (\n        <center>\n          <h3>Login to upload</h3>\n        </center>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}